# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W1Q18ijShOFzoK6IYAL3kwI_pOKkuRbl
"""

#Codes used
#1a.
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.cluster as cluster
import time
sns.set_context('poster')
sns.set_color_codes()
plot_kwds = {'alpha' : 0.25, 's' : 80, 'linewidths':0}
data = np.load('/cluster_data.npy')
data

#1b.
plt.scatter(data.T[0], data.T[1], c='b', **plot_kwds)
frame = plt.gca()
frame.axes.get_xaxis().set_visible(False)
frame.axes.get_yaxis().set_visible(False)

# 1c.
def plot_clusters(data, algorithm, args, kwds):
    start_time = time.time()
    labels = algorithm(*args, **kwds).fit_predict(data)
    end_time = time.time()
    palette = sns.color_palette('deep', np.unique(labels).max() + 1)
    colors = [palette[x] if x >= 0 else (0.0, 0.0, 0.0) for x in labels]
    plt.scatter(data.T[0], data.T[1], c=colors, **plot_kwds)
    frame = plt.gca()
    frame.axes.get_xaxis().set_visible(False)
    frame.axes.get_yaxis().set_visible(False)
    plt.title('Clusters found by {}'.format(str(algorithm.__name__)), fontsize=24)
    plt.text(-0.5, 0.7, 'Clustering took {:.2f} s'.format(end_time - start_time), fontsize=14)

plot_clusters(data, cluster.KMeans, (), {'n_clusters':6})

# 2a.
# i.	elbow method for determining the number of clusters to use
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

Error =[]
for i in range(2, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++').fit(data)
    Error.append(kmeans.inertia_)
import matplotlib.pyplot as plt
plt.plot(range(2, 11), Error)
plt.title('Elbow method')
plt.xlabel('No of clusters')
plt.ylabel('elbow method')

#plotting k-means
plot_clusters(data, cluster.KMeans, (), {'n_clusters':4})

# 2b. ploting
plot_clusters(data, cluster.AffinityPropagation, (), {'preference': -10, 'damping':0.9})

# 2c.meanshift
len(data)

import numpy as np
from sklearn.cluster import MeanShift, estimate_bandwidth
estimate = estimate_bandwidth(data, quantile=0.2, n_samples=2309)
estimate

## meanshift plotting
plot_clusters(data, cluster.MeanShift, (), {'bandwidth':0.235 , 'cluster_all':False})

#2d.. plotting spectral clustering
## 2d.I. Default parameters ::n_clusters=8, *, eigen_solver=None, n_components=None, random_state=None, n_init=10, gamma=1.0, affinity='rbf', n_neighbors=10, eigen_tol=0.0, assign_labels='kmeans', degree=3, coef0=1, kernel_params=None, n_jobs=None, verbose=False

plot_clusters(data, cluster.SpectralClustering,(),{'n_clusters':3,'eigen_solver': None})

#  i.plotting agglomerative clustering
## 2e.i.Default parameters ::n_clusters=2, *, affinity='euclidean', memory=None, connectivity=None, compute_full_tree='auto', linkage='ward', distance_threshold=None, compute_distances=False

 
plot_clusters(data, cluster.AgglomerativeClustering, (), {'n_clusters':3, 'linkage':'average'})

pip install HDBSCAN

# 2f.HDBSCAN
import hdbscan
plot_clusters(data, hdbscan.HDBSCAN,(),{'min_cluster_size':10,'min_samples':20 })